#+title: Yags, un programa para teoría de gráficas
#+author: Rafael Villarroel Flores, UAEH
#+date: 1 de octubre de 2015
#+options: H:2

#+latex_class: beamer-talk
#+startup: beamer
#+language: es

#+latex_class_options: [spanish,presentation]
#+latex_header: \usepackage[spanish,mexico,es-noshorthands]{babel}
#+beamer_header: \languagepath{spanish}

#+latex_header: \lstdefinelanguage{gap}{%
#+latex_header:   morekeywords={true, while, do, and, od},
#+latex_header:   sensitive=true,
#+latex_header:   morestring=[b]",
#+latex_header:   morecomment=[l]{\#},
#+latex_header: }

#+beamer_header: \beamerdefaultoverlayspecification{<+->}
#+beamer_header: \setbeamertemplate{items}[circle]

* Introducción

** Cómputo en investigación 

   - En la investigación en combinatoria, y en particular en teoría de
     gráficas, la computadora nos ayuda a checar hipótesis y plantear
     conjeturas.
   - En la plática se pretende presentar el programa =yags= (Yet Another
     Graph System), el cual es un paquete basado en el programa =GAP=
     (Groups, Algorithms, Programming).

* GAP

** El programa =GAP=
   
*** 

#+caption:
#+attr_latex: :width 3cm
file:gap.png

   - ~GAP~ quiere decir /Groups, Algorithms and Programming/.
   - ~GAP~ se inició en RWTH-Aachen, bajo la dirección de Joachim
     Neubüser en 1985.

** Componentes de ~GAP~

   ~GAP~ se compone de:

   - Un *núcleo*, escrito en ~C~, que proporciona un intérprete para el
     lenguaje ~GAP~, y funciones y estructuras básicas.
   - Una *librería de funciones*, escritas en el lenguaje ~GAP~.
   - Una *librería de datos algebraicos*, como la librería de grupos pequeños.
   - Diversos *manuales*.

** Código de acceso libre

   El desarrollo de ~GAP~ se lleva a cabo en [[https://github.com/gap-system/gap]]

#+caption:
#+attr_latex: :width 11cm
[[file:gapgithub.png]]

* Ejemplo

** 

   #+BEGIN_SRC gap :exports code
# Encontrar el primer grupo no soluble

solvable := true;
i := 0;

while solvable do
    i := i+1;
    j := 0;
    while solvable and j < NrSmallGroups(i) do
        j := j+1;
        g := SmallGroup(i,j);
        Print("Checking SmallGroup(",i,",",j,")\n");
        solvable := IsSolvable(g);
    od;
od;

Print("First non solvable group is SmallGroup(",i,",",j,")\n");
   #+END_SRC

* Yags

** El programa =yags=


* COMMENT Local Variables

Es necesario cambiar ~org-beamer-verbatim-elements~, si no, al ver
contenido verbatim se añade la opción ~fragile~ a los frames, y entonces
no se va descubriendo un item a la vez en las listas.

Sin embargo, el paquete listings /necesita/ la opción ~fragile~, si no,
causa errores. Por eso aquí la variable local añade tal opción solo a
los bloques con código fuente.

# Local Variables:
# eval: (set-input-method "spanish-prefix")  
# eval: (add-to-list 'org-latex-packages-alist '("" "listings"))
# org-confirm-babel-evaluate: nil
# org-beamer-outline-frame-title: "Contenido"
# org-beamer-verbatim-elements: (src-block)
# org-latex-image-default-width: "3cm"
# End:
