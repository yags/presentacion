#+title: Yags, un programa para teoría de gráficas
#+author: Rafael Villarroel Flores, UAEH
#+date: 1 de octubre de 2015
#+options: H:2

#+latex_class: beamer-talk
#+startup: beamer
#+language: es

#+latex_class_options: [spanish,presentation]
#+latex_header: \usepackage[spanish,mexico,es-noshorthands]{babel}
#+beamer_header: \languagepath{spanish}

#+latex_header: \lstdefinelanguage{gap}{%
#+latex_header:   morekeywords={gap>, while, do, and, od},
#+latex_header:   sensitive=true,
#+latex_header:   morestring=[b]",
#+latex_header:   morecomment=[l]{\#},
#+latex_header: }

#+beamer_header: \beamerdefaultoverlayspecification{<+->}
#+beamer_header: \setbeamertemplate{items}[circle]

* Introducción

** Cómputo en investigación 

   - En la investigación en combinatoria, y en particular en teoría de
     gráficas, la computadora nos ayuda a checar hipótesis y plantear
     conjeturas.
   - En la plática se pretende presentar el programa =yags= (Yet Another
     Graph System), el cual es un paquete basado en el programa =GAP=
     (Groups, Algorithms, Programming).

* GAP

** El programa =GAP=
   
*** 

#+caption:
#+attr_latex: :width 3cm
file:gap.png

   - =GAP= quiere decir /Groups, Algorithms and Programming/.
   - =GAP= se inició en RWTH-Aachen, bajo la dirección de Joachim
     Neubüser en 1985.
   - La página de GAP es [[http://gap-system.org/]].

** Componentes de =GAP=

   =GAP= se compone de:

   - Un *núcleo*, escrito en =C=, que proporciona un intérprete para el
     lenguaje =GAP=, y funciones y estructuras básicas.
   - Una *librería de funciones*, escritas en el lenguaje =GAP=.
   - Una *librería de datos algebraicos*, como la librería de grupos pequeños.
   - *Manuales* (tutorial y referencia).

** Código de acceso libre

   El desarrollo de =GAP= se lleva a cabo en [[https://github.com/gap-system/gap]]

#+caption:
#+attr_latex: :width 11cm
[[file:gapgithub.png]]

* Ejemplos

** Ejemplo de sesión interactiva

*** Cálculos simples

   #+BEGIN_SRC gap :exports code
gap> 2+2;
4
gap> 34^3;
39304
gap> 34^30;
8797666833317830254826668219153233583932440576
   #+END_SRC

*** Cálculos con permutaciones
   
   #+BEGIN_SRC gap :exports code
gap> (1,2,3)^2;
(1,3,2)
gap> (1,2)*(1,2,3);
(1,3)
gap> (1,2,3)*(1,2);
(2,3)
   #+END_SRC

** Ejemplo de código

   #+BEGIN_SRC gap :exports code
# Encontrar el primer grupo no soluble

solvable := true;
i := 0;

while solvable do
    i := i+1;
    j := 0;
    while solvable and j < NrSmallGroups(i) do
        j := j+1;
        g := SmallGroup(i,j);
        Print("Checking SmallGroup(",i,",",j,")\n");
        solvable := IsSolvable(g);
    od;
od;

Print("First non solvable group is SmallGroup(",i,",",j,")\n");
   #+END_SRC

* Paquetes

** Paquetes de =GAP=

   - =GAP= es /extendible/, lo cual significa que es relativamente sencillo
     añadirle nuevas funciones y capacidades, por medio de *paquetes*.
   - Muchos paquetes ya vienen con =GAP=.
   - Es posible enviar paquetes a los autores de =GAP=, los cuales pasan
     por un proceso de arbitraje análogo al de los artículos de
     investigación. 

** Algunos paquetes que vienen con =GAP=

   - ACE :: Advanced Coset Enumerator
   - Alnuth :: Algebraic number theory and an interface to KANT
   - ANUPQ :: ANU p-Quotient
   - Automata :: A package on automata
   - AutPGrp :: Computing the Automorphism Group of a p-Group
   - Carat :: Interface to CARAT, a crystallographic groups package
   - Circle :: Adjoint groups of finite rings
   - cohomolo :: Cohomology groups of finite groups on finite modules
   - Crime :: A GAP Package to Calculate Group Cohomology and Massey Products
   - CRISP :: Computing with Radicals, Injectors, Schunck classes and Projectors
   - Cryst :: Computing with crystallographic groups

** Algunos paquetes que vienen con =GAP=

   - Cubefree :: Constructing the Groups of a Given Cubefree Order
   - EDIM :: Elementary Divisors of Integer Matrices
   - Example :: Example/Template of a GAP Package and Guidelines for Package Authors
   - FactInt :: Advanced Methods for Factoring Integers
   - FGA :: Free Group Algorithms
   - FORMAT :: Computing with formations of finite solvable groups.
   - Forms :: Sesquilinear and Quadratic
   - FPLSA :: Finitely Presented Lie Algebras
   - FR :: Computations with functionally recursive groups
   - homalg :: A homological algebra meta-package for computable Abelian categories
   - Repsn :: A GAP4 Package for constructing representations of finite group

** Paquetes combinatorios

   - DESIGN :: The Design Package for GAP
   - GRAPE :: GRaph Algorithms using PErmutation groups
   - simpcomp :: A GAP toolbox for simplicial complexes

** Otros paquetes no includos (todavía) en =GAP=

   - Simplicial Homology :: [[http://www.eecis.udel.edu/~dumas/Homology/Homology]]
   - Digraphs :: [[http://www-groups.mcs.st-andrews.ac.uk/~jamesm/digraphs.php]]
   - FinIng :: Finite Incidence Geometry [[http://cage.ugent.be/fining/]]
   - YAGS :: Yet Another Graph System	

** Gráficas en GRAPE

   #+BEGIN_SRC gap :exports code
gap> LoadPackage("grape");
true
gap> P := Graph( SymmetricGroup(5), [[1,2]], OnSets,
>
function(x,y) return Intersection(x,y)=[]; end );
rec( isGraph := true, order := 10,
group := Group([ ( 1, 2, 3, 5, 7)( 4, 6, 8, 9,10), ( 2, 4)( 6, 9)( 7,10) ]),
schreierVector := [ -1, 1, 1, 2, 1, 1, 1, 1, 2, 2 ],
adjacencies := [ [ 3, 5, 8 ] ], representatives := [ 1 ],
names := [ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 1, 3 ], [ 4, 5 ], [ 2, 4 ],
[ 1, 5 ], [ 3, 5 ], [ 1, 4 ], [ 2, 5 ] ] )
gap> Diameter(P);
2
gap> Girth(P);
5
   #+END_SRC

** Un dibujo de la gráfica usando Graphviz

   #+BEGIN_SRC dot :cmd dot :cmdline -Tpng :file petersen.png :exports both :cache yes
graph G {
node [overlap=scale,splines=true];
"[ 3, 4 ]" -- "[ 1, 2 ]";
"[ 4, 5 ]" -- "[ 1, 2 ]";
"[ 4, 5 ]" -- "[ 2, 3 ]";
"[ 4, 5 ]" -- "[ 1, 3 ]";
"[ 2, 4 ]" -- "[ 1, 3 ]";
"[ 1, 5 ]" -- "[ 2, 3 ]";
"[ 1, 5 ]" -- "[ 3, 4 ]";
"[ 1, 5 ]" -- "[ 2, 4 ]";
"[ 3, 5 ]" -- "[ 1, 2 ]";
"[ 3, 5 ]" -- "[ 2, 4 ]";
"[ 1, 4 ]" -- "[ 2, 3 ]";
"[ 1, 4 ]" -- "[ 3, 5 ]";
"[ 2, 5 ]" -- "[ 3, 4 ]";
"[ 2, 5 ]" -- "[ 1, 3 ]";
"[ 2, 5 ]" -- "[ 1, 4 ]";
}
   #+END_SRC

   #+RESULTS[aa22d381e6d13f89992c16f52fee5ecb4f228654]:
   [[file:petersen.png]]

* Yags

** El programa =yags=




* COMMENT Local Variables

Es necesario cambiar =org-beamer-verbatim-elements=, si no, al ver
contenido verbatim se añade la opción =fragile= a los frames, y entonces
no se va descubriendo un item a la vez en las listas.

Sin embargo, el paquete listings /necesita/ la opción =fragile=, si no,
causa errores. Por eso aquí la variable local añade tal opción solo a
los bloques con código fuente.

# Local Variables:
# eval: (set-input-method "spanish-prefix")  
# eval: (add-to-list 'org-latex-packages-alist '("" "listings"))
# org-confirm-babel-evaluate: nil
# org-beamer-outline-frame-title: "Contenido"
# org-beamer-verbatim-elements: (src-block)
# org-latex-image-default-width: "3cm"
# org-hide-emphasis-markers: nil
# End:
