#+MACRO: newline @@latex:\\@@ @@html:<br>@@

#+title: YAGS, un programa para {{{newline}}} la teoría de las gráficas
#+author: Rafael Villarroel Flores, UAEH
#+date: 22 de octubre de 2015
#+options: H:2

#+latex_class: beamer-talk
#+startup: beamer
#+language: es

#+latex_class_options: [spanish,presentation]
#+latex_header: \usepackage[spanish,mexico,es-noshorthands]{babel}
#+beamer_header: \languagepath{spanish}

#+latex_header: \lstdefinelanguage{gap}{%
#+latex_header:   morekeywords={gap>, return, local, not, true, fail, then, if, repeat, until, while, do, and, od, else, fi, end, function},
#+latex_header:   sensitive=true,
#+latex_header:   morestring=[b]",
#+latex_header:   morecomment=[l]{\#},
#+latex_header: }
#+latex_header: \lstdefinelanguage{dot}{}
#+latex_header: \lstdefinelanguage{gaps}{}

#+latex_header: \usepackage{tkz-berge}

#+beamer_header: \beamerdefaultoverlayspecification{<+->}
#+beamer_header: \setbeamertemplate{items}[circle]

* Introducción

** Cómputo en investigación 

   - En la investigación en combinatoria, y en particular en teoría de
     gráficas, la computadora nos ayuda a verificar hipótesis y plantear
     conjeturas.
   - En la plática se pretende presentar el programa =YAGS= (Yet Another
     Graph System), el cual es un paquete basado en el programa =GAP=
     (Groups, Algorithms, Programming).

* GAP

** El programa =GAP=
   
*** 

#+caption:
#+attr_latex: :width 3cm
file:gap.png

   - =GAP= se inició en RWTH-Aachen, bajo la dirección de Joachim
     Neubüser en 1985.
   - La página de GAP es [[http://gap-system.org/]].

** Componentes de =GAP=
   #+beamer: \pause
   =GAP= se compone de:

   - Un *núcleo*, escrito en =C=, que proporciona un intérprete para el
     lenguaje =GAP=, y funciones y estructuras básicas.
   - Una *biblioteca de funciones*, escritas en el lenguaje =GAP=.
   - Una *biblioteca de datos algebraicos*, como la librería de grupos pequeños.
   - *Manuales* (tutorial y referencia).

** Código de acceso libre

   El desarrollo de =GAP= se lleva a cabo en [[https://github.com/gap-system/gap]]

#+caption:
#+attr_latex: :width 11cm
[[file:gapgithub.png]]

* Ejemplos
** Ejemplo de sesión interactiva

   #+latex: \small
   #+BEGIN_SRC gaps :exports code
gap> 2+2;
4
gap> 34^3;
39304
gap> 34^30;
8797666833317830254826668219153233583932440576
gap> (1,2,3)^2;
(1,3,2)
gap> (1,2)*(1,2,3);
(1,3)
gap> (1,2,3)*(1,2);
(2,3)
   #+END_SRC

** Ejemplo de código

   #+INCLUDE: "./no-soluble.gap" src gap :lines "1-2"
   #+beamer: \pause
   #+INCLUDE: "./no-soluble.gap" src gap :lines "3-13"
   #+beamer: \pause
   #+INCLUDE: "./no-soluble.gap" src gap :lines "14-24"

* Paquetes

** Paquetes de =GAP=

   - =GAP= es /extensible/, lo cual significa que es relativamente sencillo
     añadirle nuevas funciones y capacidades, por medio de *paquetes*.
   - Muchos paquetes ya vienen con =GAP=.
   - Es posible enviar paquetes a los autores de =GAP=, los cuales pasan
     por un proceso de arbitraje análogo al de los artículos de
     investigación. 

** Algunos paquetes que vienen con =GAP=

   - ACE :: Advanced Coset Enumerator
   - Alnuth :: Algebraic number theory and an interface to KANT
   - ANUPQ :: ANU p-Quotient
   - Automata :: A package on automata
   - AutPGrp :: Computing the Automorphism Group of a p-Group
   - Carat :: Interface to CARAT, a crystallographic groups package
   - Circle :: Adjoint groups of finite rings
   - cohomolo :: Cohomology groups of finite groups on finite modules
   - Crime :: A GAP Package to Calculate Group Cohomology and Massey Products
   - CRISP :: Computing with Radicals, Injectors, Schunck classes and Projectors

** COMMENT Algunos paquetes que vienen con =GAP=

   - Cubefree :: Constructing the Groups of a Given Cubefree Order
   - EDIM :: Elementary Divisors of Integer Matrices
   - Example :: Example/Template of a GAP Package and Guidelines for Package Authors
   - FactInt :: Advanced Methods for Factoring Integers
   - FGA :: Free Group Algorithms
   - FORMAT :: Computing with formations of finite solvable groups.
   - Forms :: Sesquilinear and Quadratic
   - FPLSA :: Finitely Presented Lie Algebras
   - FR :: Computations with functionally recursive groups
   - homalg :: A homological algebra meta-package for computable Abelian categories
   - Repsn :: A GAP4 Package for constructing representations of finite group

** Paquetes combinatorios

   - DESIGN :: The Design Package for GAP
   - GRAPE :: GRaph Algorithms using PErmutation groups
   - simpcomp :: A GAP toolbox for simplicial complexes

** Otros paquetes no includos (todavía) en =GAP=

   - Simplicial Homology :: [[http://www.eecis.udel.edu/~dumas/Homology/Homology]]
   - Digraphs :: [[http://www-groups.mcs.st-andrews.ac.uk/~jamesm/digraphs.php]]
   - FinIng :: Finite Incidence Geometry [[http://cage.ugent.be/fining/]]
   - SgpViz :: Semigroup visualization [[http://cmup.fc.up.pt/cmup/mdelgado/sgpviz/]]
   - YAGS :: Yet Another Graph System	

** Gráficas en GRAPE

   #+BEGIN_SRC gap :exports code
gap> LoadPackage("grape");
Loading  GRAPE 4.6.1 (GRaph Algorithms using PErmutation groups)
by Leonard H. Soicher (http://www.maths.qmul.ac.uk/~leonard/).
Homepage: http://www.maths.qmul.ac.uk/~leonard/grape/
true
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> P:=Graph(SymmetricGroup(5),[[1,2]],OnSets,function(x,y) return Intersection(x,y)=[]; end);
   #+END_SRC
   #+beamer: \pause\vspace*{-0.45cm}
   #+BEGIN_SRC gap :exports code
rec( adjacencies := [ [ 3, 5, 8 ] ], group := Group([ (1,2,3,5,7)(4,6,8,9,10), (2,4)(6,9)(7,10) ]), 
  isGraph := true, names := [ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 1, 3 ], [ 4, 5 ], [ 2, 4 ], [ 1, 5 ], 
      [ 3, 5 ], [ 1, 4 ], [ 2, 5 ] ], order := 10, representatives := [ 1 ], 
  schreierVector := [ -1, 1, 1, 2, 1, 1, 1, 1, 2, 2 ] )
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Diameter(P);
2
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Girth(P);
5
   #+END_SRC

** Algunas características de =GRAPE=

   - Si un grupo \(\Gamma\) actúa en la gráfica \(G\), =GRAPE= utiliza
     tal información para optimizar cálculos en la gráfica.
   - Por ejemplo, la gráfica completa con 6 vértices se da como
     =CompleteGraph(SymmetricGroup(6))=. 
   - =GRAPE= no incluye una herramienta para dibujar gráficas.

** Un dibujo de la gráfica usando Graphviz   

   Graphviz es un programa que sirve para dibujar gráficas ([[http://www.graphviz.org/]])

*** Código 							   :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :beamer_col: 0.4
    :END:

   #+name: graphviz
   #+BEGIN_SRC dot :cmd dot :cmdline -Tpng :file petersen.png :exports both :cache yes
graph G {
"[ 3, 4 ]" -- "[ 1, 2 ]";
"[ 4, 5 ]" -- "[ 1, 2 ]";
"[ 4, 5 ]" -- "[ 2, 3 ]";
"[ 4, 5 ]" -- "[ 1, 3 ]";
"[ 2, 4 ]" -- "[ 1, 3 ]";
"[ 1, 5 ]" -- "[ 2, 3 ]";
"[ 1, 5 ]" -- "[ 3, 4 ]";
"[ 1, 5 ]" -- "[ 2, 4 ]";
"[ 3, 5 ]" -- "[ 1, 2 ]";
"[ 3, 5 ]" -- "[ 2, 4 ]";
"[ 1, 4 ]" -- "[ 2, 3 ]";
"[ 1, 4 ]" -- "[ 3, 5 ]";
"[ 2, 5 ]" -- "[ 3, 4 ]";
"[ 2, 5 ]" -- "[ 1, 3 ]";
"[ 2, 5 ]" -- "[ 1, 4 ]";
}
   #+END_SRC
#+beamer: \pause
*** Dibujo							   :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :beamer_col: 0.58
    :END:

   #+attr_html: :width 400 :alt Petersen :align center
   #+attr_latex: :float t :width 6cm
   #+RESULTS[ae884ff742d5c84ffc1841a7f1db9efb630098a6]: graphviz
   [[file:petersen.png]]

** La gráfica de Petersen

   Un mejor dibujo de la gráfica anterior:

    #+name: petersen-berge
    #+header: :imagemagick yes :iminoptions -density 300 -resize 400
    #+header: :packages '(("" "tikz") ("" "tkz-berge")) :border 1pt
    #+header: :file (by-backend (latex "petersen-berge.tikz") (beamer "petersen-berge.tikz") (t "petersen-berge.png"))
    #+header: :cache yes
    #+begin_src latex :results raw file
\begin{tikzpicture}[scale=1.2]
  \SetUpVertex[InnerSep=0pt,MinSize=0pt]
  \SetUpEdge[lw=1.5pt]
  \grEmptyCycle*[rotation=90,prefix=a,RA=2,Math]{12,34,15,23,45}
  \grEmptyCycle*[rotation=90,prefix=b,RA=1,Math]{35,25,24,14,13}
  \EdgeInGraphLoop{a}{5}
  \EdgeInGraphMod{b}{5}{2}
  \EdgeIdentity{a}{b}{5}
  \draw (0,-2) node [fill=orange!80!white,below]{Gráfica de Petersen};
\end{tikzpicture}
    #+end_src
    
    #+attr_html: :width 400 :alt petersen-berge :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[c1dcfe255d8d4c9c0d1787b79a7694e2426be023]: petersen-berge
    [[file:petersen-berge.png]]

* YAGS

** El programa =YAGS=

   - =YAGS= es un paquete para =GAP= creado por M.\nbsp{}Pizaña en
     2003 en la UAM-Iztapalapa.
   - De momento es incompatible con =GRAPE=.
   - =YAGS= define varias familias de gráficas y permite calcular
     parámetros sobre gráficas, sin referencia a un grupo actuando en
     la gráfica.

** Primer sesión con =YAGS=

   #+BEGIN_SRC gap :exports code
gap> LoadPackage("yags");
Loading  YAGS 0.0.1  (Yet Another Graph System),
by  R. MacKinney, M.A. Pizana and R. Villarroel-Flores
rene@xamanek.izt.uam.mx, map@xamanek.izt.uam.mx, rvf0068@gmail.com
true
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> g:=RandomGraph(20,1/5);
Graph( Category := SimpleGraphs, Order := 20, Size := 36, Adjacencies := 
[ [ 5, 9, 10 ], [ 12, 15, 16 ], [ 8, 13, 14, 16 ], [ 5, 6, 8, 20 ], 
  [ 1, 4, 18, 20 ], [ 4, 7, 10, 16, 19 ], [ 6 ], [ 3, 4, 11, 13, 14, 16, 19 ],
  [ 1, 13, 14, 15, 17 ], [ 1, 6, 20 ], [ 8, 14 ], [ 2, 20 ], [ 3, 8, 9, 14 ], 
  [ 3, 8, 9, 11, 13, 16, 20 ], [ 2, 9, 18 ], [ 2, 3, 6, 8, 14 ], [ 9 ], 
  [ 5, 15 ], [ 6, 8 ], [ 4, 5, 10, 12, 14 ] ] )
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Diameter(g);
5
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Girth(g);
3
   #+END_SRC

** Dibujos con =YAGS=

*** 

   #+BEGIN_SRC gap :exports code
gap> g:=WheelGraph(7);
Graph( Category := SimpleGraphs, Order := 8, Size := 14, Adjacencies := 
[ [ 2, 3, 4, 5, 6, 7, 8 ], [ 1, 3, 8 ], [ 1, 2, 4 ], [ 1, 3, 5 ], [ 1, 4, 6 ], 
  [ 1, 5, 7 ], [ 1, 6, 8 ], [ 1, 2, 7 ] ] )
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Draw(g);
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> g:=WheelGraph(15,4);;
   #+END_SRC
   #+beamer: \pause\vspace*{-0.2cm}
   #+BEGIN_SRC gap :exports code
gap> Draw(g);
   #+END_SRC

* Ejemplos con YAGS

** Problema de Leo

   - En una plática en la UAEH en mayo de este año, Leonardo Martínez
     planteó la siguiente pregunta:
   - ¿Cuál es el máximo de aristas que una gráfica de 8 vértices puede
     tener, entre las gráficas con número de clan a lo más 3 y número de
     independencia a lo más 2?
   - (El *número de clan* de una gráfica \(G\) es el mayor \(n\) tal
     que \(K_{n}\) es subgráfica de \(G\). Se denota con \(\omega(G)\)).
   - (El *número de independencia* de \(G\) es \(\omega(\overline{G})\)).
   - Como el /número de Ramsey/ \(R(4,3)=9\), toda gráfica con 9
     vértices tiene \(\omega(G)\geq 4\) o \(\omega(\overline{G})\geq
     3\).
   - Por lo tanto, es interesante considerar las gráficas de 8
     vértices con \(\omega(G)\leq 3\) y \(\omega(\overline{G})\leq 2\).
   - Por el /teorema de Turán/, tales gráficas tienen entre 12 y 21
     aristas.

** Solución

   - Definimos una función para checar la condición deseada, y la
     guardamos en el archivo =leo.gap=.
     #+BEGIN_SRC gap :exports code
CondicionLeo := function (g)
    return CliqueNumber(g)<=3 and
           CliqueNumber(ComplementGraph(g))<=2;
end;
     #+END_SRC
     #+beamer: \pause
   - En una sesión interactiva con =YAGS=, obtenemos:
     #+beamer: \footnotesize
     #+BEGIN_SRC gaps :exports code
gap> Read("leo.gap");
gap> g8:=ConnectedGraphsOfGivenOrder(8);;
gap> f:=Filtered(g8,CondicionLeo);;
gap> List(f,x->Size(x));
[ 16, 17, 18 ]
     #+END_SRC
   #+beamer: \pause\normalsize
   - Por lo que la respuesta a la pregunta de Leonardo es 18.

** Operador de clanes

   - En mi investigación me interesa el /operador de clanes/. Dada una
     gráfica \(G\), su *gráfica de clanes* \(K(G)\) es la gráfica de
     intersección de los clanes de \(G\).
   - (Un *clan* de \(G\) es una subgráfica completa maximal).
   - Definimos \(K^{n}(G)\) como \(K(K^{n-1}(G))\) si \(n\geq2\),
     \(K^{1}(G)=K(G)\).
   - Hay algunas gráficas para las que la sucesión de órdenes de las
     gráficas \(\{|K^{n}(G)|\}\) tiende a infinito. Tales gráficas se
     llaman *divergentes*, las otras se llaman *convergentes*.
   - No se conoce un algoritmo general para determinar el
     *comportamiento* de una gráfica.
   - Usaremos las listas de gráficas para encontrar las que sean
     divergentes más pequeñas.

** Operador de clanes (continuación)

   - Hay una condición (/propiedad de Helly/) que es fácilmente
     verificable y que implica convergencia. Para que una gráfica no
     tenga la propiedad de Helly necesita tener al menos 6 vértices.
   - Si \(G\) tiene un /vértice dominado/ \(v\), entonces \(G\) y
     \(G-v\) tienen el mismo comportamiento.
   - Por lo tanto, si \(G\) tiene 6 vértices y uno de ellos es
     dominado, entonces \(G\) es convergente.
   - Puede ser que \(G\) no sea Helly, pero para alguna \(n\) se tenga
     que \(K^{n}(G)\) sea Helly. Por supuesto que en ese caso \(G\) es
     convergente. 

** Código de clanes

   #+INCLUDE: "./clanes.gap" src gap :lines "1-4"
   #+beamer: \pause
   #+INCLUDE: "./clanes.gap" src gap :lines "5-8"
   #+beamer: \pause
   #+INCLUDE: "./clanes.gap" src gap :lines "9-"
   #+beamer: \pause

** Sesión interactiva. Gráficas de 6 vértices

   #+latex: \footnotesize
   #+BEGIN_SRC gaps :exports code
gap> graphs:=ConnectedGraphsOfGivenOrder(6);;
gap> Length(graphs);
112
gap> graphs:=Filtered(graphs,HasNoDominatedVertex);;
gap> Length(graphs);
9
gap> graphs:=Filtered(graphs,IsNotCliqueHelly);;
gap> Length(graphs);
1
gap> Draw(graphs[1]);
   #+END_SRC
   #+latex: \pause\normalsize

   La única gráfica de 6 vértices que obtenemos es la gráfica del
   octaedro, y es de hecho divergente (Neumann-Lara, 1975).

** Gráficas de 7 vértices

   #+latex: \footnotesize
   #+BEGIN_SRC gaps :exports code
gap> graphs:=ConnectedGraphsOfGivenOrder(7);;
gap> Length(graphs);
853
gap> graphs:=Filtered(graphs,HasNoDominatedVertex);;
gap> Length(graphs);
46
gap> graphs:=Filtered(graphs,IsNotCliqueHelly);;
gap> Length(graphs);
6
gap> graphs:=Filtered(graphs,IsNotEventuallyHelly);;
gap> Length(graphs);
3
   #+END_SRC
   #+latex: \pause\normalsize

   Las dos primeras gráficas tiene una /retracción/ al octaedro, 
   la tercera es la /suspensión/ del ciclo \(C_{5}\). Las tres son
   divergentes por teoremas de Neumann-Lara.

** Página de YAGS

   =YAGS= se puede obtener de la página:

   #+BEGIN_CENTER
   [[https://github.com/yags/]]
   #+END_CENTER

* COMMENT Código en presentaciones
  - [-] Para resolver el problema se propone:
    - [X] Usar el nombre =gaps= para el nuevo lenguaje. Configurar
      =listings=.
    - [X] Usar =org-latex-custom-lang-environments= para convertir
      bloque del lenguaje =gaps= en =semiverbatim=
    - [X] Usar algún filtro para añadir el código de los overlays cuando
      se exporta a beamer.
    - [X] Hay que arreglar cómo cambiar el tamaño de los =semiverbatim='s.
    - [ ] Ver por qué =gap>= no sale coloreado en el paquete listings.
  - [ ] GAP
    - [ ] Ver como imprimir una propiedad de mejor manera
  - [ ] Clanes
    - [ ] Dibujos de las gráficas que van quedando después de aplicar
      los criterios.
    - [ ] Ver si se pueden incluir las de 8.

* COMMENT Comentarios a YAGS

  - Quería definir una función =HasDominatedVertices=, pero no pude
    porque =DominatedVertices= ya está definido, y
    =HasDominatedVertices= en un /tester/ si la función
    =DominatedVertices= ha sido ya aplicada en una gráfica =g=.

* COMMENT Local Variables

Es necesario cambiar =org-beamer-verbatim-elements=, si no, al ver
contenido verbatim se añade la opción =fragile= a los frames, y entonces
no se va descubriendo un item a la vez en las listas.

Sin embargo, el paquete listings /necesita/ la opción =fragile=, si no,
causa errores. Por eso aquí la variable local añade tal opción solo a
los bloques con código fuente.

# Local Variables:
# eval: (set-input-method "spanish-prefix")  
# eval: (add-to-list 'org-latex-packages-alist '("" "listings"))
# eval: (load-library "ob-dot")
# org-confirm-babel-evaluate: nil
# org-beamer-outline-frame-title: "Contenido"
# org-beamer-verbatim-elements: (src-block)
# org-latex-image-default-width: "3cm"
# org-hide-emphasis-markers: nil
# org-latex-custom-lang-environments: ((gaps "semiverbatim"))
# End:
